- hosts: localhost
  connection: local
  #gather_facts: no
  tasks:
    - name: Setup
      tags: [never, setup]
      block:
        - pip:
            executable: pip2
            name: [docker, pip==20.3.3]
          become: true
        - pip:
            executable: /usr/local/bin/pip3
            name: [jsondiff, compose, docker-compose]
          become: true
        - yum:
            name: libselinux-python3
          become: true
          vars:
            ansible_python_interpreter: /usr/bin/python2

    - import_role:
        name: templates
      tags:
        - generate

    - name: Deploy
      tags:
        - deploy
      block:
        - name: Gerrit invalid DNS workaround
          block:
            - file:
                dest: "{{ playbook_dir }}/stacks/gerrit/mounts/app/lib"
                state: directory
              register: gerrit_lib
            - get_url:
                url: https://repo1.maven.org/maven2/mysql/mysql-connector-java/5.1.43/mysql-connector-java-5.1.43.jar
                dest: "{{ playbook_dir }}/stacks/gerrit/mounts/app/lib/"
              when: gerrit_lib.changed
        - file:
            dest: "{{ playbook_dir }}/stacks/gerrit/app-ssh"
            state: directory
            owner: "1000"
          become: true
        - docker_compose:
            build: yes
            project_src: "{{ playbook_dir }}/stacks/{{ stack }}"
            state: present
          loop: [common, traefik, ldap, gerrit, jenkins]
          loop_control:
            loop_var: stack
        # Just using compose for now. If we want to deploy we'd have to push images somewhere
        #- docker_stack:
        #    state: present
        #    name: "{{ stack }}"
        #    compose:
        #      - "{{ playbook_dir }}/stacks/{{ stack }}/docker-compose.yaml"
        #  loop: [ldap, gerrit, jenkins]
        #  loop_control:
        #    loop_var: stack

    - name: PostDeploy
      tags:
        - postdeploy
      block:
        - name: Wait for gerrit ssh port to be up
          wait_for:
            port: 29418
            host: "{{ web_ip }}"
        - name: Initialise admin user
          uri:
            url: "http://{{ web_ip }}:8080/login?username={{ creds_admin_username }}&password={{ creds_admin_password }}"
            status_code: [302]
            method: POST
        - file:
            path: "{{ playbook_dir }}/stacks/gerrit/keys"
            state: directory
        - openssh_keypair:
            path: "{{ playbook_dir }}/stacks/gerrit/keys/admin_rsa"
          register: admin_rsa
        - name: Upload gerrit ssh key
          uri:
            url: "http://{{ web_ip }}:8080/a/accounts/self/sshkeys"
            user: "{{ creds_admin_username }}"
            password: "{{ creds_admin_password }}"
            method: POST
            status_code: [200, 201]
            headers:
              Content-Type: plain/text
            body: "{{ admin_rsa.public_key }}"
        - blockinfile:
            path: "{{ ansible_env.HOME }}/.ssh/config"
            block: |
              Host gerrit_local_admin
                HostName "{{ web_ip }}"
                Port 29418
                StrictHostKeyChecking no
                UserKnownHostsFile /dev/null
                IdentityFile {{ admin_rsa.filename }}
                IdentitiesOnly yes
                User {{ creds_admin_username }}
        - name: Create template projects
          uri:
            url: "http://{{ web_ip }}:8080/a/projects/{{ ('common/' + project.name) | urlencode | replace('/', '%2f') }}"
            user: "{{ creds_admin_username }}"
            password: "{{ creds_admin_password }}"
            method: POST
            status_code: [200, 201, 404] # 404 if already created
            #status_code: [200, 201] # 404 if already created
            headers:
              Content-Type: application/json
            body_format: json
            body:
              description": "Common template project"
          loop:
            - name: spring-petclinic
          loop_control:
            loop_var: project
        - name: Upload spring-petclinic repo
          shell: |
            rm -rf tmp_upload_repos
            mkdir tmp_upload_repos
            cd tmp_upload_repos
            git clone git@github.com:BaukJ/spring-petclinic.git

            cd petclinic
            git remote add gerrit ssh://gerrit_local_admin/common/spring-petclinic
            git push gerrit main:refs/heads/master

            cd ../..
            rm -r tmp_upload_repos

            ssh gerrit_local_admin gerrit set-members Administrators --add {{ users.keys() | join( ' --add ' ) }}
        - name: Setup Users
          include: plays/setup_user.yaml
          loop: "{{ users.keys() }}"
          loop_control:
            loop_var: user
    - name: Lesson1
      tags: [never, lesson1]
      block: []


    - name: Info
      tags: [info, always]
      block:
        - debug:
            msg: |
              Gerrit     available here: http://{{  web_ip }}:8080 |
              LDAP Admin available here: https://{{ web_ip }}:6443 |



        #- name: Create base projects
        #  uri:
        #    url: "http://{{ web_ip }}:8080/a/projects/BASE-{{ user.id }}"
        #    user: "{{ creds_admin_username }}"
        #    password: "{{ creds_admin_password }}"
        #    method: POST
        #    status_code: [200, 201, 404] # 404 if already created
        #    headers:
        #      Content-Type: application/json
        #    body_format: json
        #    body:
        #      description": "Base parent project for user: {{ user.id }}"
        #  loop: "{{ users }}"
        #  loop_control:
        #    loop_var: user
        #- name: Create User groups
        #  uri:
        #    url: "http://{{ web_ip }}:8080/a/groups/group-{{ user.id }}"
        #    user: "{{ creds_admin_username }}"
        #    password: "{{ creds_admin_password }}"
        #    method: POST
        #    status_code: [200, 201]
        #    headers:
        #      Content-Type: application/json
        #    body_format: json
        #    body:
        #      owner: "{{ user.id }}"
        #      members:
        #        - username: "{{ user.id }}"
        #  loop: "{{ users }}"
        #  loop_control:
        #    loop_var: user

